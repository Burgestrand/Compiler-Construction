module Absjavalette where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Program [Definition]
  deriving (Eq,Ord,Show)

data Arg =
   Arg Type Ident
  deriving (Eq,Ord,Show)

data Definition =
   Definition Type Ident [Arg] Block
  deriving (Eq,Ord,Show)

data Block =
   Block [Statement]
  deriving (Eq,Ord,Show)

data Statement =
   SEmpty
 | SBlock Block
 | SDeclaration Type [Declaration]
 | SReturn Expr
 | SReturnV
 | SIf Expr Statement
 | SIfElse Expr Statement Statement
 | SWhile Expr Statement
 | SExpr Expr
  deriving (Eq,Ord,Show)

data Declaration =
   DNoInit Ident
 | DInit Ident Expr
  deriving (Eq,Ord,Show)

data Type =
   TInt
 | TDoub
 | TBool
 | TVoid
 | TFun Type [Type]
  deriving (Eq,Ord,Show)

data Expr =
   EInc Ident
 | EDec Ident
 | EVar Ident
 | EInt Integer
 | EDouble Double
 | EBool LBool
 | ECall Ident [Expr]
 | EString String
 | ENeg Expr
 | ENot Expr
 | EMul Expr MulOp Expr
 | EAdd Expr AddOp Expr
 | EEqu Expr EquOp Expr
 | ERel Expr RelOp Expr
 | EAnd Expr Expr
 | EOr Expr Expr
 | EAss Ident Expr
  deriving (Eq,Ord,Show)

data LBool =
   LTrue
 | LFalse
  deriving (Eq,Ord,Show)

data AddOp =
   Plus
 | Minus
  deriving (Eq,Ord,Show)

data MulOp =
   Times
 | Div
 | Mod
  deriving (Eq,Ord,Show)

data EquOp =
   EQU
 | NE
  deriving (Eq,Ord,Show)

data RelOp =
   LTH
 | LE
 | GTH
 | GE
  deriving (Eq,Ord,Show)

