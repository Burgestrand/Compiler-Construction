-- programs ------------------------------------------------

comment    "#";
comment    "//";
comment    "/*" "*/";

entrypoints Program;
Program.    Program ::= [Definition];
Arg. 	      Arg ::= Type Ident;
separator   Arg ",";

Definition.	       Definition ::= Type Ident "(" [Arg] ")" Block;
separator nonempty Definition "";

-- statements ----------------------------------------------

Block. Block ::= "{" [Statement] "}";

separator     Statement "";
SEmpty.       Statement ::= ";";
SBlock.       Statement ::= Block;
SDeclaration. Statement ::= Type [Declaration] ";";
SReturn.      Statement ::= "return" Expr ";";
SReturnV.     Statement ::= "return" ";";
SIf.          Statement ::= "if" "(" Expr ")" Statement;
SIfElse.      Statement ::= "if" "(" Expr ")" Statement "else" Statement;
SWhile.       Statement ::= "while" "(" Expr ")" Statement;
SExpr.        Statement ::= Expr ";";

DNoInit.           Declaration ::= Ident; 
DInit.             Declaration ::= Ident "=" Expr;
separator nonempty Declaration ",";

-- Types ---------------------------------------------------

TInt.          Type ::= "int";
TDouble.       Type ::= "double";
TBool.         Type ::= "boolean";
TVoid.         Type ::= "void";
internal TFun. Type ::= Type "(" [Type] ")";
separator      Type ",";


-- Expressions ---------------------------------------------

internal ETyped. Expr8 ::= Type Expr;
EInc.      Expr7 ::= Ident "++";
EDec.      Expr7 ::= Ident "--";
EVar.      Expr7 ::= Ident;
EInt.      Expr7 ::= Integer;
EDouble.   Expr7 ::= Double;
EBool.     Expr7 ::= LBool;
ECall.     Expr7 ::= Ident "(" [Expr] ")";
EString.   Expr7 ::= String;
ENeg.      Expr6 ::= "-" Expr7;
ENot.      Expr6 ::= "!" Expr7;
EMul.      Expr5 ::= Expr5 MulOp Expr6;
EAdd.      Expr4 ::= Expr4 AddOp Expr5;
EEqu.      Expr3 ::= Expr3 EquOp Expr4;
ERel.      Expr3 ::= Expr3 RelOp Expr4;
EAnd.      Expr2 ::= Expr3 "&&" Expr2;
EOr.       Expr1 ::= Expr2 "||" Expr1;
EAss.      Expr  ::= Ident "=" Expr;
coercions  Expr 7;
separator  Expr ",";

LTrue.  LBool ::= "true";
LFalse. LBool ::= "false";

-- operators -----------------------------------------------

Plus.  AddOp ::= "+";
Minus. AddOp ::= "-";

Times. MulOp ::= "*";
Div.   MulOp ::= "/";
Mod.   MulOp ::= "%";

EQU.   EquOp ::= "==";
NE.    EquOp ::= "!=";

LTH.   RelOp ::= "<";
LE.    RelOp ::= "<=";
GTH.   RelOp ::= ">";
GE.    RelOp ::= ">=";