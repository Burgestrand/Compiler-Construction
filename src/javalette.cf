-- programs ------------------------------------------------

comment    "#";
comment    "//";
comment    "/*" "*/";

entrypoints Program;
Program.    Program ::= [TopDef];
Arg. 	      Arg ::= Type Ident;
separator   Arg ",";

FnDef.	           TopDef ::= Type Ident "(" [Arg] ")" Block;
separator nonempty TopDef "";

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}";

separator Stmt "";
Empty.    Stmt ::= ";";
BStmt.    Stmt ::= Block;
Decl.     Stmt ::= Type [Item] ";";
Ret.      Stmt ::= "return" Expr ";";
VRet.     Stmt ::= "return" ";";
Cond.     Stmt ::= "if" "(" Expr ")" Stmt;
CondElse. Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;
While.    Stmt ::= "while" "(" Expr ")" Stmt;
SExp.     Stmt ::= Expr ";";

NoInit.            Item ::= Ident; 
Init.              Item ::= Ident "=" Expr;
separator nonempty Item ",";

-- Types ---------------------------------------------------

Int.            Type ::= "int";
Doub.           Type ::= "double";
Bool.           Type ::= "boolean";
Void.           Type ::= "void";
internal   Fun. Type ::= Type "(" [Type] ")";
separator       Type ",";


-- Expressions ---------------------------------------------


EIncr.     Expr7 ::= Ident "++";
EDecr.     Expr7 ::= Ident "--";
EVar.      Expr7 ::= Ident;
ELitInt.   Expr7 ::= Integer;
ELitDoub.  Expr7 ::= Double;
ELitTrue.  Expr7 ::= "true";
ELitFalse. Expr7 ::= "false";
EApp.      Expr7 ::= Ident "(" [Expr] ")";
EString.   Expr7 ::= String;
Neg.       Expr6 ::= "-" Expr7;
Not.       Expr6 ::= "!" Expr7;
EMul.      Expr5 ::= Expr5 MulOp Expr6;
EAdd.      Expr4 ::= Expr4 AddOp Expr5;
ERel.      Expr3 ::= Expr3 RelOp Expr4;
EAnd.      Expr2 ::= Expr3 "&&" Expr2;
EOr.       Expr1 ::= Expr2 "||" Expr1;
Ass.       Expr  ::= Ident "=" Expr ";";
coercions  Expr 7;
separator  Expr ",";


-- operators -----------------------------------------------

Plus.  AddOp ::= "+";
Minus. AddOp ::= "-";
Times. MulOp ::= "*";
Div.   MulOp ::= "/";
Mod.   MulOp ::= "%";
LTH.   RelOp ::= "<";
LE.    RelOp ::= "<=";
GTH.   RelOp ::= ">";
GE.    RelOp ::= ">=";
EQU.   RelOp ::= "==";
NE.    RelOp ::= "!=";